include: all_lint_rules.yaml

analyzer:
  # For more information see:
  # https://dart.dev/guides/language/analysis-options#enabling-additional-type-checks
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true

  # Common generated files
  exclude:
    - "**/*.g.dart"
    - "**/*.gr.dart"
    - "**/*.freezed.dart"
    - "**/*.config.dart"
    - "**/*.cached.dart"
    - "test/.test_coverage.dart"
    - "lib/generated_plugin_registrant.dart"

  errors:
    # Without ignore here, we cause import of all_lint_rules to warn, because some rules conflict.
    # We explicitly enabled even conflicting rules and are fixing the conflicts in this file.
    included_file_warning: ignore
    # Treat missing required parameters as an error.
    missing_required_param: error
    # Treat missing returns as an error, not as a hint or a warning.
    missing_return: error
    # Treat assigning new values to a parameter as a warning.
    parameter_assignments: warning
    # Allow having TODOs in the code.
    todo: ignore

linter:
  rules:
    # Should not be enabled when the Dart formatter is used.
    always_put_control_body_on_new_line: false

    # Team decided to keep package imports
    always_use_relative_imports: false

    # Team decided to keep package imports
    prefer_relative_imports: false

    # Unnecessary force to specify type when declaring local variable
    always_specify_types: false

    # Conflicts with: type_annotate_public_apis
    avoid_annotating_with_dynamic: false

    # This should be project-dependent decisssion.
    avoid_catches_without_on_clauses: false

    # Raises in tests' mock
    avoid_implementing_value_types: false

    # Allow to define AppColors, AppTypography classes
    avoid_classes_with_only_static_members: false

    # It is often quicker when dealing with not well known APIs
    # to see parameter values in the call/constructor,
    avoid_redundant_argument_values: false

    # Allow to specify public setter and do not expose getter
    avoid_setters_without_getters: false

    # Give more flexibility when defining lambda (Generic<T> t) => someOperation(t)
    avoid_types_on_closure_parameters: false

    # More flexibility if developer preffers cascase or sequental call
    cascade_invocations: false

    # Conflict with cubit initializers
    discarded_futures: false

    # Allow pass configuration to an app
    do_not_use_environment: false

    # Not necessary in Flutter Widgets
    diagnostic_describe_all_properties: false

    # Do not like strict flutter TODOs style
    flutter_style_todos: false

    # Unnecessary explicit of Callable classes
    implicit_call_tearoffs: false

    # In some cases affects readability (e.g. Singleton definition)
    join_return_with_assignment: false

    # In general stick to 80 characters, but allow SomeVeryLongCamelCaseClass
    lines_longer_than_80_chars: false

    # Allow define abstract class with only one method
    one_member_abstracts: false

    # Give developer more flexibility if should define local types or not
    omit_local_variable_types: false

    # Too verbose documentation
    package_api_docs: false

    # Null checks don't need a message
    prefer_asserts_with_message: false

    # Incompatible with DI package
    prefer_final_parameters: false

    # Prefer single quotes instead
    prefer_double_quotes: false

    # Not quite suitable for Flutter, which may have a `build` method with a single return,
    # but that return is still complex enough that a "body" is worth it.
    prefer_expression_function_bodies: false

    # forEach performance
    prefer_foreach: false

    # Weird syntax: double x = 8
    prefer_int_literals: false

    # Unnecessary documentation for Widgets
    public_member_api_docs: false

    # This rule enforces the local var style, which we don't like
    unnecessary_final: false

    # Does not respect types. If satisfied: code does not compile
    unnecessary_lambdas: false

    # Team decided to have more flexibility
    use_if_null_to_convert_nulls_to_bools: false

    # Do not enforce setters
    use_setters_to_change_properties: false

    # https://github.com/dart-lang/language/issues/870
    unnecessary_await_in_return: false

    # Too restrictive
    missing_whitespace_between_adjacent_strings: false

    # Give more flexibility to define parameters as final or not
    avoid_final_parameters: false

    # Unnecessary force
    avoid_returning_this: false

    # Allows to create Widget with parameters for future improvements
    avoid_unused_constructor_parameters: false

    # We don't want to force Java-style enums
    use_enums: false

    # Too restrictive in terms of method naming
    use_to_and_as_if_applicable: false

    # Requires meta dependency
    avoid_equals_and_hash_code_on_mutable_classes: false

    # https://my-pull-request-url
    my_rule_1: false

    # https://my-pull-request-url
    my_rule_2: false